# -*- coding: utf-8 -*-
"""Student Habits vs Academic Performance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BlcBPD6PZitR4oqHPFeT12UKh54u2Fwd

#Analyzing the Impact of Lifestyle Habits on Academic Performance

###Importing libraries
"""

"""
To work with datasets:
"""
import pandas as pd
"""
To work with arrays:
"""
import numpy as np
"""
To work with plots:
"""
import matplotlib.pyplot as plt
import seaborn as sbn
"""
Machine Learning
"""
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

"""###Importing data"""

Data = pd.read_csv("/content/student_habits_performance.csv")
Data.head()

"""###Data preprocessing"""

Data.shape

#Exclude the student_id of dataset
Data = Data.drop(columns=['student_id'])

"""Missing data"""

Data.isnull().sum()

"""We have 91 missing records in parental_education_level. This feature is not numeric, so we will delete the rows with null records in parental_education_level."""

#delete the rows with null records in parental_education_level.
Data = Data.dropna(subset=['parental_education_level'])
Data.shape

"""Dtypes"""

Data.dtypes

"""General descrition"""

Data.describe()

"""Boxplots"""

#Boxplot for exam_score
sbn.boxplot(Data["exam_score"])
plt.show()

#Boxplot for exam_score with gender
sbn.boxplot(x="gender", y="exam_score", data=Data)
plt.show()

#Boxplot for exam with parental_education_level
sbn.boxplot(x = "parental_education_level", y = "exam_score", data = Data)
plt.show()

#Boxplot for social_media_hours with gender
sbn.boxplot(x="gender", y = "social_media_hours", data = Data)
plt.show()

"""Gender codification"""

#Female = 0, Male = 1, Other = 2
Data['gender'] = Data['gender'].replace(['Female', 'Male', 'Other'], [0, 1, 2])

"""part_time_job codification"""

#No = 0, Yes = 1
Data["part_time_job"] = Data["part_time_job"].replace(["No", "Yes"], [0, 1])

"""diet_quality codification"""

#['Fair', 'Good', 'Poor'] = [0, 1, 2]
Data["diet_quality"] = Data["diet_quality"].replace(["Fair", "Good", "Poor"], [0, 1, 2])

"""parental_education_level codification"""

#['Master', 'High School', 'Bachelor'] = [0, 1, 2]
Data["parental_education_level"] = Data["parental_education_level"].replace(["Master", "High School", "Bachelor"], [0, 1, 2])

"""internet_quality codification"""

#['Average', 'Poor', 'Good'] = [0, 1, 2]
Data["internet_quality"] = Data["internet_quality"].replace(["Average", "Poor", "Good"], [0, 1, 2])

"""extracurricular_participation codification"""

Data["extracurricular_participation"] = Data["extracurricular_participation"].replace(["No", "Yes"], [0, 1])

"""###Data analysis

Mapa de correla√ß√µes
"""

#heatmap
plt.figure(figsize = (15, 8))
sbn.heatmap(Data.corr(), annot = True, cmap = "Blues")
plt.show()

"""A strong positive correlation of 0.82 was found between study hours and final exam scores, suggesting that students who dedicate more time to studying tend to achieve significantly higher results on their exams.

study_hours_per_day	 vs. exam_score
"""

#Study_hours_per_day vs. exam_score
plt.figure(figsize = (15, 8))
sbn.scatterplot(x = "study_hours_per_day", y = "exam_score", data = Data)
plt.show()

"""It should be noted that the number of hours studied, although it has a strong impact on exam performance, alone, this characteristic cannot clearly define a good or bad student. For example, many students study 4 hours a day, but not all of them do well on the exam.

##Machine Learning

Data split
"""

#Data split
x = Data.drop(columns = ["exam_score"])
y = Data["exam_score"]
x_treino, x_teste, y_treino, y_teste = train_test_split(x, y, test_size = 0.2, random_state = 42)

"""Linear regression"""

Linear_regression = LinearRegression()
Linear_regression.fit(x_treino, y_treino)

"""Prediction"""

#prediction
y_pred = Linear_regression.predict(x_teste)

"""$$\text{R}^2 \ \text{score}$$

The R¬≤ score (also called the coefficient of determination) is a metric that tells you how well a regression model explains the variability of the target variable.

üîç Interpretation:
R¬≤ = 1: Perfect prediction ‚Äî the model explains 100% of the variance in the target.

R¬≤ = 0: The model does no better than simply predicting the mean of the target.

R¬≤ < 0: The model is worse than predicting the mean ‚Äî it's a poor fit.
"""

print(r2_score(y_teste, y_pred))

"""Great! An R¬≤ score of 0.889 means your regression model explains about 88.9% of the variance in the final exam scores based on the input features (like study hours, sleep, etc.).

$$\text{Mean Square Error}$$
$$
\text{MSE} = \frac{1}{n} \sum_{i=1}^{n} (y_i - \hat{y}_i)^2
$$
"""

print(mean_squared_error(y_teste, y_pred))

"""The model achieved a **Mean Squared Error (MSE)** of **30.10**, which indicates the average squared difference between the predicted and actual exam scores. Taking the square root, the **Root Mean Squared Error (RMSE)** is approximately **5.49**, meaning the model's predictions are, on average, about 5.5 points away from the actual scores. Given that exam scores range from 0 to 100, this reflects a fairly accurate model.

"""